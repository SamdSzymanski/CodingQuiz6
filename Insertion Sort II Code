 public static void insertionSort2(int n, List<Integer> arr) {
    // Write your code here
         if (n <= 1) {
            return;
        }

        // Recursively sort the subarray starting from the second element
        insertionSort2(n-1, arr);

        // Insert the last element into its correct position in the sorted subarray
        int key = arr.get(n - 1);
        int j = n - 2;
        while (j >= 0 && arr.get(j) > key) {
            arr.set(j + 1, arr.get(j));
            j--;
        }
        
        arr.set(j + 1, key);
        for (int i = 0; i < arr.size(); i++) {
            System.out.print(arr.get(i));
            if (i < arr.size() - 1) {
                System.out.print(" ");
            }
        }
        System.out.println();
    }
    }

Time complexity: O(n^2), involves nested loops
Space Complexity: O(n) where n is the amount of space used by a recursive call
